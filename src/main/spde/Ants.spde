import sample.ants._
import sample.ants.Config._
import se.scalablesolutions.akka.stm.local._

val scale = 5

size(Dim * scale, Dim * scale)
smooth()

override def setup() {
  background(255)
  World.start
}

def draw() {
  val world = World.snapshot
  for (x <- 0 until Dim; y <- 0 until Dim; cell <- world(x)(y)) {
    val (rx, ry, rw, rh) = (x * scale, y * scale, scale, scale)
    noStroke()
    fill(255)
    rect(rx, ry, rw, rh)
    if (cell.pher > 0) fill(0, 255, 0, cell.pher * PherScale)
    if (cell.food > 0) fill(255, 0, 0, 255 * (cell.food / FoodRange.floatValue))
    rect(rx, ry, rw, rh)
    for (ant <- cell.ant) {
      if (ant.food) stroke(255, 0, 0) else stroke(0)
      val (hx, hy, tx, ty) = antLine(ant.dir)
      line(rx + hx, ry + hy, rx + tx, ry + ty)
    }
    stroke(0, 0, 255)
    noFill()
    val homeStart = World.homeOff * scale
    val homeWidth = AntsSqrt * scale
    rect(homeStart, homeStart, homeWidth, homeWidth)
  }
}

val s = scale - 1
val m = s / 2

def antLine(dir: Int) = dir match {
  case 0|4 => (m, 0, m, s)
  case 1|5 => (s, 0, 0, s)
  case 2|6 => (s, m, 0, m)
  case _   => (s, s, 0, 0)
}
